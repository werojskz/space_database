---
title: "Analiza działalności firmy Space-U"
author:
- Weronika Jaszkiewicz
- Dominik Hołoś
- Weronika Pyrtak
- Katarzyna Rudzińska
subtitle: Bazy Danych
output:
  html_document:
    toc: true
    df_print: paged
  pdf_document:
    extra_dependencies: ["multirow"]
    latex_engine: xelatex
    toc: true
    fig_caption: true
    fig_width: 5
    fig_height: 4
    number_sections: false
header-includes:
- \usepackage{polyglossia}
- \setmainlanguage{polish}
- \usepackage{graphicx}
- \usepackage{float}
fontsize: 12pt
editor_options: 
  markdown: 
    wrap: 72
---

```{r, echo = FALSE, warning=FALSE, message = FALSE}
if (!require(RMariaDB)) install.packages("RMariaDB")
if (!require(DBI)) install.packages("DBI")
if (!require(RMySQL)) install.packages("RMySQL")
if (!require(dplyr)) install.packages("dplyr")
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(tidyr)) install.packages("tidyr")
if (!require(lubridate)) install.packages("lubridate")
if (!require(RColorBrewer)) install.packages("RColorBrewer")

```

```{r, echo=FALSE}
# Połączenie z bazą danych
con <- dbConnect(MariaDB(),
                 user = "team08",
                 password = "te@mlob",
                 dbname = "team08",
                 host = "giniewicz.it",
                 port = 3306)
```

# Najpopularniejsze wyprawy, koszty, przychody i opłacalność

```{r, echo= FALSE}
# 1. Najpopularniejsze rodzaje wypraw - liczba rezerwacji
query_popularity <- "
SELECT
    tt.trip_type_id,
    tt.name AS trip_name,
    COUNT(b.booking_id) AS bookings_count
FROM booking b
JOIN trip t ON b.trip_id = t.trip_id
JOIN trip_type tt ON t.trip_type_id = tt.trip_type_id
GROUP BY tt.trip_type_id, tt.name
ORDER BY bookings_count DESC
"
popularity <- dbGetQuery(con, query_popularity)
top_5_names <- paste(popularity$trip_name[1:5], collapse = ", ")

top_5_counts <- popularity$bookings_count[1:5]
min_booking <- min(top_5_counts)
max_booking <- max(top_5_counts)
```

```{r, echo = FALSE}
# 2. Koszty dla każdego rodzaju wyprawy
query_costs <- "
SELECT
    tt.trip_type_id,
    SUM(c.amount) AS total_costs
FROM cost c
JOIN trip t ON c.trip_id = t.trip_id
JOIN trip_type tt ON t.trip_type_id = tt.trip_type_id
GROUP BY tt.trip_type_id
"
costs <- dbGetQuery(con, query_costs)
```

```{r, echo = FALSE}
# 3. Przychody dla każdego rodzaju wyprawy
query_revenue <- "
SELECT
    tt.trip_type_id,
    SUM(tr.amount) AS total_revenue
FROM transaction tr
JOIN trip t ON tr.trip_id = t.trip_id
JOIN trip_type tt ON t.trip_type_id = tt.trip_type_id
GROUP BY tt.trip_type_id
"
revenue <- dbGetQuery(con, query_revenue)
```

```{r, echo = FALSE}
# Łączenie danych
analysis <- popularity %>%
  left_join(costs, by = "trip_type_id") %>%
  left_join(revenue, by = "trip_type_id") %>%
  mutate(
    total_costs = ifelse(is.na(total_costs), 0, total_costs),
    total_revenue = ifelse(is.na(total_revenue), 0, total_revenue),
    profit = total_revenue - total_costs,
    profit_margin = ifelse(total_revenue > 0, profit / total_revenue, 0)
  ) %>%
  arrange(desc(bookings_count))

# Wyświetlenie wyników
print(analysis %>% select(trip_name, bookings_count, total_costs, total_revenue, profit, profit_margin))

top_profit <- analysis[1:5, ]
profit_bullets <- paste0(
  "- ", 
  top_profit$trip_name, 
  ": ", 
  formatC(top_profit$profit / 1e6, format = "f", digits = 2), 
  " mln zł zysku brutto"
)
profit_bullet_text <- paste(profit_bullets, collapse = "\n")
```

```{r, echo = FALSE}
# Wykres 1: Popularność wypraw
ggplot(analysis, aes(x = reorder(trip_name, bookings_count), y = bookings_count)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() +
  labs(title = "Liczba rezerwacji na rodzaje wypraw", x = "Rodzaj wyprawy", y = "Liczba rezerwacji") +
  theme_minimal()

```

Analiza danych rezerwacyjnych wskazuje, że największą popularnością
wśród klientów cieszyły się wyprawy typu `r top_5_names`. Każda z nich
miała od `r min_booking` do `r max_booking` rezerwacji, co potwierdza
ich wysokie zainteresowanie na tle pozostałych ofert.

```{r, echo = FALSE}
# Wykres 2: Zysk dla rodzajów wypraw
ggplot(analysis, aes(x = reorder(trip_name, profit), y = profit)) +
  geom_bar(stat = "identity", fill = "darkgreen") +
  coord_flip() +
  labs(title = "Zysk brutto dla rodzajów wypraw", x = "Rodzaj wyprawy", y = "Zysk") +
  theme_minimal()

```

Pod względem rentowności na czoło wysuwają się wyprawy:
`r cat(profit_bullet_text)`

**Należy ponmieniać, aby było interaktywne** To pokazuje, że nie tylko
popularność wpływa na opłacalność – ważna jest również struktura kosztów
i cena jednostkowa. Co ciekawe, wiele wypraw z mniejszą liczbą
rezerwacji okazało się bardziej zyskownych niż te najbardziej
uczęszczane.

Z drugiej strony, odnotowano kilka wypraw generujących straty – np.
Mission to Carmenta i Mission to Cerestra – ich koszty przewyższyły
uzyskane przychody, a wskaźnik powrotu klientów po tych wyjazdach był
zerowy. Wskazuje to jednoznacznie na potrzebę rewizji tych pozycji w
ofercie.

Na wykresie średniego zysku na jedną wyprawę widać wyraźnie, że
najlepiej radzą sobie misje związane z planetami Silvanus, Mesembria i
Fortuna. Generują one największy zwrot z pojedynczej podróży, często
kilkakrotnie wyższy niż wyprawy mniej opłacalne.

Wniosek: opłacalność wypraw zależy nie tylko od liczby klientów, ale
przede wszystkim od właściwego zarządzania kosztami i odpowiedniego
ustalenia cen. Warto skupić się na dalszym rozwijaniu wypraw o wysokiej
rentowności i ograniczyć te, które przynoszą straty.

# Liczba klientów w czasie – firma rośnie czy podupada?

```{r, echo = FALSE}
# 1. Pobranie danych z niezbędnych tabel
trip_data <- dbGetQuery(con, "
SELECT 
  t.trip_id,
  t.trip_type_id,
  tt.name AS trip_type,
  tt.is_round_trip,
  tt.planet_id,
  p.planet,
  c.amount AS cost_amount,
  tr.amount AS transaction_amount
FROM trip t
JOIN trip_type tt ON t.trip_type_id = tt.trip_type_id
JOIN planet p ON tt.planet_id = p.planet_id
LEFT JOIN cost c ON t.trip_id = c.trip_id
LEFT JOIN transaction tr ON t.trip_id = tr.trip_id
")

# 2. Agregacja: suma przychodów, kosztów i liczba wypraw dla każdego typu
summary_df <- trip_data %>%
  group_by(trip_type, planet) %>%
  summarise(
    total_income = sum(transaction_amount, na.rm = TRUE),
    total_cost = sum(cost_amount, na.rm = TRUE),
    count = n(),
    profit = total_income - total_cost,
    avg_profit_per_trip = (total_income - total_cost) / n()
  ) %>%
  arrange(desc(count))

# 3. Wydruk wyników
print(summary_df)
```

```{r, echo = FALSE}
# 4. Wykres: opłacalność podróży wg typu wyprawy
ggplot(summary_df, aes(x = reorder(trip_type, -avg_profit_per_trip), y = avg_profit_per_trip, fill = planet)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(
    title = "Średni zysk na podróż wg typu wyprawy",
    x = "Typ wyprawy",
    y = "Średni zysk (PLN)"
  ) +
  theme_minimal()
```

```{r}
# Zapytanie SQL
query <- "
SELECT
    DATE_FORMAT(t.departure_date, '%Y-%m') AS month,
    COUNT(DISTINCT b.client_id) AS unique_clients
FROM booking b
JOIN trip t ON b.trip_id = t.trip_id
GROUP BY month
ORDER BY month;
"

# Pobranie danych
monthly_clients <- dbGetQuery(con, query)

# Konwersja kolumny month na datę (1-szy dzień miesiąca)
monthly_clients$month <- as.Date(paste0(monthly_clients$month, "-01"))

# Wykres liniowy
ggplot(monthly_clients, aes(x = month, y = unique_clients)) +
  geom_line(size = 1.2, color = "blue") +
  geom_point(size = 3, color = "red") +
  labs(
    title = "Liczba obsłużonych klientów w każdym miesiącu",
    x = "Miesiąc",
    y = "Liczba unikalnych klientów"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```

```{r}
# Pobranie danych
query <- "
SELECT b.booking_id, b.client_id, b.trip_id, t.trip_type_id, tt.name AS trip_name
FROM booking b
JOIN trip t ON b.trip_id = t.trip_id
JOIN trip_type tt ON t.trip_type_id = tt.trip_type_id
ORDER BY b.client_id, b.booking_id
"
bookings <- dbGetQuery(con, query)

# Dodanie numeru kolejnej rezerwacji dla każdego klienta
bookings <- bookings %>%
  group_by(client_id) %>%
  arrange(booking_id) %>%
  mutate(trip_order = row_number()) %>%
  ungroup()

# Maksymalna liczba rezerwacji dla każdego klienta
max_trips <- bookings %>%
  group_by(client_id) %>%
  summarise(max_trip_order = max(trip_order))

# Połączenie, by wiedzieć, ile razy klient rezerwował
bookings <- bookings %>%
  left_join(max_trips, by = "client_id")

# Zaznaczamy, czy klient wrócił po danej wycieczce
bookings <- bookings %>%
  mutate(returned = max_trip_order > trip_order)

# Analiza retencji
retention_summary <- bookings %>%
  group_by(trip_id, trip_name) %>%
  summarise(
    total_clients = n_distinct(client_id),
    returned_clients = sum(returned)
  ) %>%
  mutate(return_rate = round(returned_clients / total_clients, 2)) %>%
  arrange(desc(return_rate))

# Wyświetlenie podsumowania
print(retention_summary)

# Wykres wskaźnika powrotu
ggplot(retention_summary, aes(x = reorder(trip_name, return_rate), y = return_rate, fill = return_rate)) +
  geom_col() +
  coord_flip() +
  scale_fill_viridis_c() +
  labs(title = "Wskaźnik powrotu klientów po wycieczkach",
       x = "Nazwa wycieczki",
       y = "Wskaźnik powrotu (0-1)") +
  theme_minimal()

# Proste podsumowanie tekstowe - wycieczki z return_rate < 0.3
low_return_trips <- retention_summary %>% filter(return_rate < 0.3)

if (nrow(low_return_trips) > 0) {
  cat("Wycieczki z niskim wskaźnikiem powrotu (poniżej 30%), które warto rozważyć do usunięcia lub poprawy oferty:\n")
  print(low_return_trips %>% select(trip_name, return_rate, total_clients))
} else {
  cat("Brak wycieczek z niskim wskaźnikiem powrotu. Klienci zazwyczaj wracają na kolejne wycieczki.\n")
}

# Zamknięcie połączenia
# dbDisconnect(con)
```

```{r}
#Czy są planety, które są częściej odwiedzane podczas wypraw typu “round trip” niż “one way”? Jakie cechy tych planet mogą to tłumaczyć?

# 1. Pobranie danych z bazy
query <- "
SELECT
  p.planet,
  tt.is_round_trip,
  COUNT(t.trip_id) AS trip_count,
  p.special_features,
  p.orbit_period_days,
  p.day0_x_coord,
  p.day0_y_coord,
  p.day0_z_coord
FROM trip t
JOIN trip_type tt ON t.trip_type_id = tt.trip_type_id
JOIN planet p ON tt.planet_id = p.planet_id
GROUP BY 
  p.planet, tt.is_round_trip, 
  p.special_features, p.orbit_period_days, 
  p.day0_x_coord, p.day0_y_coord, p.day0_z_coord
"

df <- dbGetQuery(con, query)

# 2. Pivot danych: oddzielenie round-trip i one-way
df_wide <- df %>%
  pivot_wider(names_from = is_round_trip, values_from = trip_count, values_fill = 0) %>%
  rename(one_way = `0`, round_trip = `1`) %>%
  mutate(
    round_trip_ratio = round_trip / (one_way + 1),  # unikamy dzielenia przez 0
    total_visits = round_trip + one_way,
    category = case_when(
      round_trip_ratio > 2 ~ "dominują round-trip",
      round_trip_ratio < 0.5 ~ "dominują one-way",
      TRUE ~ "zrównoważone"
    ),
    x = day0_x_coord,
    y = day0_y_coord,
    z = day0_z_coord
  )

# 3. Wykres: top planet wg round_trip_ratio
top_planets <- df_wide %>% arrange(desc(round_trip_ratio)) %>% head(10)

ggplot(top_planets, aes(x = reorder(planet, round_trip_ratio), y = round_trip_ratio)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  labs(title = "Top 10 planet wg przewagi round-tripów", x = "Planeta", y = "Round-trip ratio") +
  theme_minimal()

# 4. Wykres: boxplot round-trip ratio wg cech specjalnych
ggplot(df_wide, aes(x = reorder(special_features, round_trip_ratio, median), y = round_trip_ratio)) +
  geom_boxplot(fill = "darkseagreen3") +
  coord_flip() +
  labs(title = "Round-trip ratio wg cech specjalnych", x = "Cechy specjalne", y = "Round-trip ratio") +
  theme_minimal()

# 5. Wykres: round-trip ratio a okres orbitalny
ggplot(df_wide, aes(x = orbit_period_days, y = round_trip_ratio)) +
  geom_point(color = "tomato", alpha = 0.7, size = 3) +
  geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed") +
  labs(title = "Round-trip ratio a okres orbitalny planety", x = "Okres orbitalny (dni)", y = "Round-trip ratio") +
  theme_minimal()

# 6. Wykres przestrzenny 2D: układ planet wg pozycji, kolor wg kategorii
ggplot(df_wide, aes(x = x, y = y, color = category)) +
  geom_point(size = 4, alpha = 0.8) +
  labs(title = "Układ planet wg pozycji (X/Y)", x = "X", y = "Y") +
  theme_minimal()

```

# Analiza wpływu ilości miejsc w rakiecie na czynniki podróży

**Bardziej bym tu zrobiła czy wracają klienci, a nie unikatowi**

```{r}
#Jak pojemność rakiety wpływa na liczbę obsługiwanych klientów, liczbę odbytych lotów oraz częstość występowania opóźnień?

# --- 1. Pobranie danych z bazy ---
query <- "
SELECT
  c.client_id,
  c.first_name,
  c.last_name,
  r.rocket_id,
  r.name AS rocket_name,
  r.capacity,
  t.trip_id,
  t.departure_date,
  t.return_date,
  t.status
FROM client c
JOIN booking b ON c.client_id = b.client_id
JOIN trip t ON b.trip_id = t.trip_id
JOIN rocket r ON t.rocket_id = r.rocket_id
"

df_all <- dbGetQuery(con, query)
```

```{r}
# --- 2. Statystyki per pojemność rakiety ---
stats_per_capacity <- df_all %>%
  group_by(capacity) %>%
  summarise(
    unique_clients = n_distinct(client_id),
    total_flights = n_distinct(trip_id),
    delayed_flights = sum(status == "Delayed", na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(capacity))

print(stats_per_capacity)
```

```{r}
# --- 5. Liczba lotów na klienta per pojemność rakiety ---
flights_per_client_capacity <- df_all %>%
  group_by(capacity, client_id, first_name, last_name) %>%
  summarise(number_of_flights = n_distinct(trip_id), .groups = "drop")

# Wykres: Średnia liczba lotów na klienta w zależności od pojemności
avg_flights_per_client <- flights_per_client_capacity %>%
  group_by(capacity) %>%
  summarise(avg_flights = mean(number_of_flights), .groups = "drop")

ggplot(avg_flights_per_client, aes(x = factor(capacity), y = avg_flights, fill = factor(capacity))) +
  geom_col() +
  labs(title = "Średnia liczba lotów na klienta wg pojemności rakiety",
       x = "Pojemność rakiety",
       y = "Średnia liczba lotów na klienta") +
  theme_minimal() -> plot_avg_flights

print(plot_avg_flights)
```

**Zastanowić się, który wykres**

```{r, echo = FALSE}
# --- 4. Wykres: Liczba lotów i opóźnionych lotów per pojemność ---
ggplot(stats_per_capacity, aes(x = factor(capacity))) +
  geom_col(aes(y = total_flights), fill = "steelblue", alpha = 0.7) +
  geom_col(aes(y = delayed_flights), fill = "tomato", alpha = 0.7) +
  labs(title = "Liczba lotów i opóźnionych lotów według pojemności rakiety",
       x = "Pojemność rakiety",
       y = "Liczba lotów") +
  theme_minimal() -> plot_flights
print(plot_flights)

ggplot(stats_per_capacity, aes(x = factor(capacity), y = delay_ratio, fill = factor(capacity))) +
  geom_col() +
  scale_fill_brewer(palette = "Pastel1") +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  labs(title = "Procent opóźnionych lotów według pojemności rakiety",
       x = "Pojemność rakiety",
       y = "Procent opóźnionych lotów") +
  theme_minimal() -> plot_delay_ratio
print(plot_delay_ratio)

```

```{r}
stats_per_capacity <- stats_per_capacity %>%
  mutate(delay_ratio = delayed_flights / total_flights)

min_rows <- stats_per_capacity %>%
  filter(delay_ratio == min(delay_ratio)) %>%
  select(capacity, delay_ratio)

max_rows <- stats_per_capacity %>%
  filter(delay_ratio == max(delay_ratio)) %>%
  select(capacity, delay_ratio)


min_capacities <- min_rows$capacity
min_delay_ratios <- min_rows$delay_ratio

max_capacities <- max_rows$capacity
max_delay_ratios <- max_rows$delay_ratio

```

Analizując wykres opóźnień względem pojemności rakiety, można zauważyć,
że najmniejszy procent opóźnień mają rakiety o pojemności
`r min_capacities`, gdzie wynosi on `r min_delay_ratios`. Z kolei
największy procent opóźnień występuje w przypadku rakiet o pojemności
`r max_capacities`, osiągając wartość `r max_delay_ratios`. Oznacza to,
że rakieta o pojemności 7 jest najbardziej punktualna, natomiast rakieta
o pojemności 6 doświadcza opóźnień za każdym razem. Należy zatem
przeanalizować, czy nie występują problemy logistyczne lub inne czynniki
nieuwzględnione przy planowaniu długości wycieczki, które mogłyby
wpływać na punktualność.

**???**

```{r}
# --- 3. Wykres: Liczba unikalnych klientów per pojemność ---
ggplot(stats_per_capacity, aes(x = factor(capacity), y = unique_clients, fill = factor(capacity))) +
  geom_col() +
  labs(title = "Liczba unikalnych klientów według pojemności rakiety",
       x = "Pojemność rakiety",
       y = "Liczba unikalnych klientów") +
  theme_minimal() -> plot_clients
print(plot_clients)
```

# Analiza wynagrodzenia pracowników  względem uczęszczanych wypraw 

```{r}
# "Którzy pracownicy najczęściej uczestniczą w wyprawach i jakie role pełnią? Czy są lepiej wynagradzani niż inni?"

# --- 1. Pobranie danych o pracownikach, rolach i statusie wypraw ---
query <- "
SELECT
  e.employee_id,
  e.first_name,
  e.last_name,
  e.salary,
  e.position,
  te.role_in_trip,
  t.trip_id,
  t.status
FROM trip_employee te
JOIN employee e ON te.employee_id = e.employee_id
JOIN trip t ON te.trip_id = t.trip_id
"

df <- dbGetQuery(con, query)
```

```{r}
# --- 2. Liczba wypraw przypisanych do każdego pracownika z wynagrodzeniem i rolami ---
employee_trip_counts <- df %>%
  group_by(employee_id, first_name, last_name, salary) %>%
  summarise(
    total_trips = n_distinct(trip_id),
    roles = paste(unique(role_in_trip), collapse = ", "),
    .groups = "drop"
  ) %>%
  arrange(desc(total_trips))
```

```{r, echo = FALSE}
# --- 3. Liczba wystąpień każdej roli w wyprawach ---
# Sprawdzamy, jak często każda rola pojawia się w całej historii wypraw
role_counts <- df %>%
  group_by(role_in_trip) %>%
  summarise(count = n(), .groups = "drop")

ggplot(role_counts, aes(x = role_in_trip, y = count, fill = role_in_trip)) +
  geom_col(show.legend = FALSE) +
  labs(title = "Liczba wystąpień poszczególnych ról w wyprawach",
       x = "Rola w wyprawie",
       y = "Liczba wystąpień") +
  theme_minimal() +
  coord_flip()

print(role_counts)
```
```{r}
max_rows <- role_counts %>%
  filter(count == max(count)) %>%
  select(role_in_trip, count)

max_role<- max_rows$role_in_trip
max_count <- max_rows$count
```

Analiza liczby wystąpień ról pokazuje, które funkcje są kluczowe i najczęściej powtarzane. Wykres słupkowy pomaga zidentyfikować, że dominujące role to `r max_role`.

```{r}
# --- 4. Liczba wypraw z podziałem na role i status wyprawy ---
# Tu analizujemy, ile wypraw miała każda rola, rozbijając je na status (opóźnione / zakończone / zaplanowane)
role_status_counts <- df %>%
  group_by(role_in_trip, status) %>%
  summarise(count = n_distinct(trip_id), .groups = "drop")

ggplot(role_status_counts, aes(x = role_in_trip, y = count, fill = status)) +
  geom_col(position = "dodge") +
  labs(title = "Liczba wypraw według roli i statusu wyprawy",
       x = "Rola w wyprawie",
       y = "Liczba wypraw",
       fill = "Status") +
  theme_minimal() +
  coord_flip()

# --- 4. Powiązanie aktywności z wynagrodzeniem ---
employee_summary <- df %>%
  group_by(employee_id, first_name, last_name, salary, position) %>%
  summarise(
    total_trips = n_distinct(trip_id),
    roles = paste(unique(role_in_trip), collapse = ", "),
    .groups = "drop"
  ) %>%
  arrange(desc(total_trips))

ggplot(employee_summary, aes(x = total_trips, y = salary)) +
  geom_point(aes(color = position), size = 3, alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE, color = "darkblue") +
  labs(
    title = "Związek między liczbą wypraw a wynagrodzeniem pracowników",
    x = "Liczba wypraw",
    y = "Wynagrodzenie",
    color = "Stanowisko"
  ) +
  theme_minimal()
```

```{r}
# --- 5. Top 10 pracowników wg liczby wypraw i ich pensje ---
top_employees <- df %>%
  group_by(employee_id, first_name, last_name, role_in_trip, salary, position) %>%
  summarise(trips = n_distinct(trip_id), .groups = "drop") %>%
  arrange(desc(trips)) %>%
  head(10)

ggplot(top_employees, aes(x = reorder(paste(first_name, last_name), salary), y = salary, fill = role_in_trip)) +
  geom_col() +
  labs(
    title = "Top 10 pracowników wg liczby wypraw i ich wynagrodzenia",
    x = "Pracownik",
    y = "Wynagrodzenie",
    fill = "Rola"
  ) +
  coord_flip() +
  theme_minimal()

top_3_employees <- top_employees %>% head(3)
top_3_employees_names <- paste(top_3_employees$first_name, top_3_employees$last_name, collapse = ", ")

min_salary_rounded <- floor(min(top_3_employees$salary) / 100) * 100
max_salary_rounded <- ceiling(max(top_3_employees$salary) / 100) * 100

top3_role_in_trip <- unique(top_3_employees$role_in_trip)
```
Analziując wykres pokazujący zarobki pracowników, w top 3 najlepiej zarabiającmi pracownikami są `r top_3_employees_names`, którzy zarabiają między `r min_salary_rounded` a `r max_salary_rounded`**JAKA JEDNOSTKA**. Zamują oni stanowiska `r top3_role_in_trip`

Porównując wykresy dotyczące ilości wypraw per wykonywany zawód oraz wykres dotyczący zarobków najlepszych pracowników możemy zauważyć, że piloci, czyli osoby, bez których loty nie mogłyby się odbyć nie są najlepiej zarabiającymi osobami. 
```{r}
# Czy wyprawy do planet w konkretnych układach planetarnych lub galaktykach przynoszą większy zysk niż inne? (bez analizy odległości)

# --- 1. Pobranie danych z bazy ---
query <- "
SELECT
  g.galaxy AS galaxy_name,
  ps.system AS planetary_system,
  COUNT(t.trip_id) AS num_trips,
  SUM(co.amount) AS total_cost,
  SUM(tr.amount) AS total_revenue
FROM trip t
JOIN trip_type tt ON t.trip_type_id = tt.trip_type_id
JOIN planet p ON tt.planet_id = p.planet_id
JOIN planetary_system ps ON p.system_id = ps.system_id
JOIN galaxy g ON ps.galaxy_id = g.galaxy_id
LEFT JOIN cost co ON t.trip_id = co.trip_id
LEFT JOIN transaction tr ON t.trip_id = tr.trip_id
GROUP BY g.galaxy, ps.system
"

df_profit <- dbGetQuery(con, query)

# --- 2. Obliczenia ---
df_profit <- df_profit %>%
  mutate(
    net_profit = total_revenue - total_cost,
    profit_per_trip = ifelse(num_trips > 0, net_profit / num_trips, NA)
  )

# --- 3. Tabela: top 10 układów planetarnych wg zysku netto ---
df_profit_sorted <- df_profit %>%
  arrange(desc(net_profit))

print(head(df_profit_sorted, 10))

# --- 4. Wykres: Zysk netto według galaktyk ---
galaxy_profit <- df_profit %>%
  group_by(galaxy_name) %>%
  summarise(total_net_profit = sum(net_profit), .groups = "drop") %>%
  arrange(desc(total_net_profit))

ggplot(galaxy_profit, aes(x = reorder(galaxy_name, total_net_profit), y = total_net_profit, fill = galaxy_name)) +
  geom_col(show.legend = FALSE) +
  labs(title = "Zysk netto według galaktyk",
       x = "Galaktyka",
       y = "Zysk netto") +
  theme_minimal() +
  coord_flip()

# --- 5. Wykres: Zysk netto wg układów w top 5 galaktykach ---
top5_galaxies <- galaxy_profit %>%
  slice_max(order_by = total_net_profit, n = 5) %>%
  pull(galaxy_name)

df_top_sys <- df_profit %>%
  filter(galaxy_name %in% top5_galaxies)

ggplot(df_top_sys, aes(x = reorder(planetary_system, net_profit), y = net_profit, fill = galaxy_name)) +
  geom_col() +
  labs(title = "Zysk netto wg układów planetarnych (top 5 galaktyk)",
       x = "Układ planetarny",
       y = "Zysk netto",
       fill = "Galaktyka") +
  coord_flip() +
  theme_minimal()

# --- 6. Wykres: Średni zysk na wyprawę wg galaktyk ---
avg_profit_per_trip <- df_profit %>%
  group_by(galaxy_name) %>%
  summarise(avg_profit = mean(profit_per_trip, na.rm = TRUE), .groups = "drop")

ggplot(avg_profit_per_trip, aes(x = reorder(galaxy_name, avg_profit), y = avg_profit, fill = galaxy_name)) +
  geom_col(show.legend = FALSE) +
  labs(title = "Średni zysk na wyprawę wg galaktyk",
       x = "Galaktyka",
       y = "Średni zysk na wyprawę") +
  theme_minimal() +
  coord_flip()
```

```{r}
#Czy wyprawy do planet w konkretnych układach planetarnych lub galaktykach przynoszą większy zysk niż inne? Jaki jest związek między odległością planet od Ziemi a liczbą organizowanych wypraw?

library(scales)

# --- 1. Pobranie danych z bazy ---
query <- "
WITH planet_distances AS (
  SELECT
    ps.system AS planetary_system,
    SQRT(POWER(p.day0_x_coord, 2) + POWER(p.day0_y_coord, 2) + POWER(p.day0_z_coord, 2)) AS planet_distance
  FROM planet p
  JOIN planetary_system ps ON p.system_id = ps.system_id
)
SELECT
  g.galaxy AS galaxy_name,
  ps.system AS planetary_system,
  COUNT(t.trip_id) AS num_trips,
  SUM(co.amount) AS total_cost,
  SUM(tr.amount) AS total_revenue,
  AVG(pd.planet_distance) AS avg_planet_distance
FROM trip t
JOIN trip_type tt ON t.trip_type_id = tt.trip_type_id
JOIN planet p ON tt.planet_id = p.planet_id
JOIN planetary_system ps ON p.system_id = ps.system_id
JOIN galaxy g ON ps.galaxy_id = g.galaxy_id
LEFT JOIN cost co ON t.trip_id = co.trip_id
LEFT JOIN transaction tr ON t.trip_id = tr.trip_id
JOIN planet_distances pd ON pd.planetary_system = ps.system
GROUP BY g.galaxy, ps.system

"

df_profit <- dbGetQuery(con, query)

# --- 2. Obliczenia ---
df_profit <- df_profit %>%
  mutate(
    net_profit = total_revenue - total_cost,
    profit_per_trip = ifelse(num_trips > 0, net_profit / num_trips, NA)
  )

# --- 3. Tabela: top 10 układów planetarnych wg zysku netto ---
df_profit_sorted <- df_profit %>%
  arrange(desc(net_profit))

print(head(df_profit_sorted, 10))

# --- 4. Wykres: Zysk netto według galaktyk ---
galaxy_profit <- df_profit %>%
  group_by(galaxy_name) %>%
  summarise(total_net_profit = sum(net_profit), .groups = "drop") %>%
  arrange(desc(total_net_profit))

ggplot(galaxy_profit, aes(x = reorder(galaxy_name, total_net_profit), y = total_net_profit, fill = galaxy_name)) +
  geom_col(show.legend = FALSE) +
  labs(title = "Zysk netto według galaktyk",
       x = "Galaktyka",
       y = "Zysk netto") +
  theme_minimal() +
  coord_flip()

# --- 5. Wykres: Zysk netto wg układów w top 5 galaktykach ---
top5_galaxies <- galaxy_profit %>%
  slice_max(order_by = total_net_profit, n = 5) %>%
  pull(galaxy_name)

df_top_sys <- df_profit %>%
  filter(galaxy_name %in% top5_galaxies)

ggplot(df_top_sys, aes(x = reorder(planetary_system, net_profit), y = net_profit, fill = galaxy_name)) +
  geom_col() +
  labs(title = "Zysk netto wg układów planetarnych (top 5 galaktyk)",
       x = "Układ planetarny",
       y = "Zysk netto",
       fill = "Galaktyka") +
  coord_flip() +
  theme_minimal()

# --- 6. Wykres: Średni zysk na wyprawę wg galaktyk ---
avg_profit_per_trip <- df_profit %>%
  group_by(galaxy_name) %>%
  summarise(avg_profit = mean(profit_per_trip, na.rm = TRUE), .groups = "drop")

ggplot(avg_profit_per_trip, aes(x = reorder(galaxy_name, avg_profit), y = avg_profit, fill = galaxy_name)) +
  geom_col(show.legend = FALSE) +
  labs(title = "Średni zysk na wyprawę wg galaktyk",
       x = "Galaktyka",
       y = "Średni zysk na wyprawę") +
  theme_minimal() +
  coord_flip()

# --- 7. Wykres: Odległość planety a liczba wypraw ---
ggplot(df_profit, aes(x = avg_planet_distance, y = num_trips)) +
  geom_point(color = "steelblue", alpha = 0.6, size = 3) +
  geom_smooth(method = "lm", color = "darkred", se = FALSE) +
  labs(title = "Odległość planety a liczba wypraw",
       x = "Odległość planety od Ziemi (jedn. układowe)",
       y = "Liczba wypraw") +
  theme_minimal()

# --- 8. Korelacja ---
cor_value <- cor(df_profit$avg_planet_distance, df_profit$num_trips, use = "complete.obs")
cat("Współczynnik korelacji odległość vs liczba wypraw:", round(cor_value, 3), "\n")

```

```{r}
#Jak kształtuje się sezonowość wypraw w firmie pod względem liczby organizowanych wypraw oraz wygenerowanych przychodów w podziale na miesiące i kwartały? Jakie są statusy tych wypraw w tych okresach?”

# --- 1. Pobranie danych ---
query <- "
SELECT
  t.trip_id,
  t.departure_date,
  t.status,
  tt.name AS trip_type,
  tr.amount
FROM trip t
JOIN trip_type tt ON t.trip_type_id = tt.trip_type_id
JOIN transaction tr ON t.trip_id = tr.trip_id
"

df <- dbGetQuery(con, query)

# --- 2. Przygotowanie danych ---
df <- df %>%
  mutate(
    departure_date = as.Date(departure_date),
    month = month(departure_date, label = TRUE),
    quarter = quarter(departure_date)
  )

# --- 3. Agregacja danych miesięcznych ---
monthly_summary <- df %>%
  group_by(month) %>%
  summarise(
    total_trips = n_distinct(trip_id),
    total_revenue = sum(amount, na.rm = TRUE),
    completed = sum(status == "Completed"),
    delayed = sum(status == "Delayed"),
    cancelled = sum(status == "Cancelled"),
    .groups = "drop"
  )

# --- 4. Agregacja danych kwartalnych ---
quarterly_summary <- df %>%
  group_by(quarter) %>%
  summarise(
    total_trips = n_distinct(trip_id),
    total_revenue = sum(amount, na.rm = TRUE),
    completed = sum(status == "Completed"),
    delayed = sum(status == "Delayed"),
    cancelled = sum(status == "Cancelled"),
    .groups = "drop"
  )

# --- 5. Wykres: Liczba wypraw w miesiącach ---
ggplot(monthly_summary, aes(x = month, y = total_trips, group = 1)) +
  geom_line(color = "steelblue", size = 1.2) +
  geom_point(color = "steelblue", size = 3) +
  labs(title = "Liczba wypraw w poszczególnych miesiącach",
       x = "Miesiąc",
       y = "Liczba wypraw") +
  theme_minimal()

# --- 6. Wykres: Przychód miesięczny ---
ggplot(monthly_summary, aes(x = month, y = total_revenue, group = 1)) +
  geom_line(color = "darkgreen", size = 1.2) +
  geom_point(color = "darkgreen", size = 3) +
  scale_y_continuous(labels = scales::dollar_format(prefix = "$")) +
  labs(title = "Przychód z wypraw w poszczególnych miesiącach",
       x = "Miesiąc",
       y = "Przychód (USD)") +
  theme_minimal()

# --- 7. Wykres: Statusy wypraw w miesiącach ---
monthly_status <- monthly_summary %>%
  select(month, completed, delayed, cancelled) %>%
  tidyr::pivot_longer(cols = c(completed, delayed, cancelled),
                      names_to = "status", values_to = "count")

ggplot(monthly_status, aes(x = month, y = count, fill = status)) +
  geom_col(position = "dodge") +
  labs(title = "Statusy wypraw w poszczególnych miesiącach",
       x = "Miesiąc",
       y = "Liczba wypraw",
       fill = "Status") +
  theme_minimal()

# --- 8. Wykres: Liczba wypraw kwartalnie ---
ggplot(quarterly_summary, aes(x = factor(quarter), y = total_trips, fill = factor(quarter))) +
  geom_col(show.legend = FALSE) +
  labs(title = "Liczba wypraw kwartalnie",
       x = "Kwartał",
       y = "Liczba wypraw") +
  theme_minimal()

# --- 9. Wykres: Przychód kwartalny ---
ggplot(quarterly_summary, aes(x = factor(quarter), y = total_revenue, fill = factor(quarter))) +
  geom_col(show.legend = FALSE) +
  scale_y_continuous(labels = scales::dollar_format(prefix = "$")) +
  labs(title = "Przychód z wypraw kwartalnie",
       x = "Kwartał",
       y = "Przychód (USD)") +
  theme_minimal()

# --- 10. Wykres: Statusy wypraw kwartalnie ---
quarterly_status <- quarterly_summary %>%
  select(quarter, completed, delayed, cancelled) %>%
  tidyr::pivot_longer(cols = c(completed, delayed, cancelled),
                      names_to = "status", values_to = "count")

ggplot(quarterly_status, aes(x = factor(quarter), y = count, fill = status)) +
  geom_col(position = "dodge") +
  labs(title = "Statusy wypraw kwartalnie",
       x = "Kwartał",
       y = "Liczba wypraw",
       fill = "Status") +
  theme_minimal()


```
```{r}
dbDisconnect(con)
```
